<%= form_for @simple_slip do |f| %>
  <%= render 'common/message' %>

  <table id="slipTable">
    <thead>
      <tr>
        <th>年　月</th>
        <th>日</th>
        <th>摘　　要</th>
        <th>勘定科目</th>
        <th>補助科目</th>
        <% if branch_mode %><th>計上部門</th><% end %>
        <th>増　加</th>
        <th>減　少</th>
        <th>累　計</th>
        <th style="width: 4em;">振　替</th>
        <th style="width: 4em;">領収書</th>
        <th colspan="4"></th>
      </tr>

      <tr id="cashSumBefore" class="cashRow">
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <% if branch_mode %><td></td><% end %>
        <td></td>
        <td></td>
        <td class="amountSum" <%= 'style="color: red;"' if @pre_sum_amount < 0 %>><%= to_amount(@pre_sum_amount, :show_zero => true) %></td>
        <td></td>
        <td></td>
        <td colspan="4" align="center">
          <%= link_to '△', {:action => 'index', :account_code => @finder.account_code, 'finder[offset]' => @finder.prev_offset, 'finder[keep_paging]' => true} if @finder.prev_offset %>
        </td>
      </tr>
    </thead>

    <tbody>
      <% @slips.each do |slip| %>
        <tr class="cashRow hover" slip_id="<%= slip.id %>">
          <%= render 'show_line', :slip => slip %>
        </tr>
      <% end %>
    </tbody>

    <tfoot>
      <tr id="cashSumAfter" class="cashRow">
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <% if branch_mode %><td></td><% end %>
        <td></td>
        <td></td>
        <td class="amountSum" <%= 'style="color: red;"' if @sum_amount < 0 %>><%= to_amount( @sum_amount, :show_zero => true ) %></td>
        <td></td>
        <td></td>
        <td colspan="4" align="center">
          <%= link_to '▽', {:action => 'index', :account_code => @finder.account_code, 'finder[offset]' => @finder.next_offset, 'finder[keep_paging]' => true} if @finder.next_offset %>
        </td>
      </tr>

      <%= render 'form', :f => f %>
    </tfoot>
  </table>
<% end %>

<script>
  // 累計の計算
  // 累計がマイナスの場合は、金額を赤色表示にする
  function calcSum() {
    var container = $('#slipTable');
    var rows = container.find('tr[slip_id]');

    var before = container.find('tr#cashSumBefore .amountSum');
    var sum = toInt(before.text());
    if ( sum < 0 ) {
      $(before).css('color', 'red');
    }

    container.find('tr[slip_id]').each(function() {
      sum += toInt($(this).find('.amountIncrease').text());
      sum -= toInt($(this).find('.amountDecrease').text());
      $(this).find('.amountSum').text(toAmount(sum));

      if ( sum < 0 ) {
        $(this).find('.amountSum').css('color', 'red');
      }
    });

    var after = container.find('tr#cashSumAfter .amountSum');
    var sum = toInt(after.text()); // 過去伝票をページングして参照しているかもしれないので画面の計算値に依存しない
    if ( sum < 0 ) {
      $(after).css('color', 'red');
    }
  }

  $(document).ready(function() {
    $('#simple_slip_day').select().focus();

    calcSum();

    // 消費税欄を初期化
    var form = $('#new_simple_slip');
    <% if 'index' == action_name %>
      var url = '<%= url_for :controller => '/mm/accounts', :action => 'get_tax_type' %>';
      var params = {account_id: form.find('.accountSelect').val()};

      $.get(url, params, function(tax_type) {
        form.find('.taxTypeSelect').val(tax_type);
        updateTaxAmountSimple(form);
        form.addClass('tax_type_ready');
      });
    <% else %>
      updateTaxAmountSimple(form, $('#slip_tax_amount_increase').val(), $('#slip_tax_amount_decrease').val());
    <% end %>
  });

  function validateAmountOnOneSide( form, showAlert ) {
    if (! form && $(form).length == 0) {
      alert('システムエラー');
      return null;
    }

    form = $(form);

    var increase = form.find('[name*=\\[amount_increase\\]]').val().toInt();
    var decrease = form.find('[name*=\\[amount_decrease\\]]').val().toInt();

    if ( increase == 0 && decrease == 0 ) {
      if ( showAlert ) {
        alert('金額を入力してください。');
      }
      return null;
    } else if ( increase != 0 && decrease != 0 ) {
      if ( showAlert ) {
        alert('金額は増加・減少のどちらか一方に入力してください。');
      }
      return null;
    } else if ( increase < 0 || decrease < 0 ) {
      if ( showAlert ) {
        alert('金額がマイナスです。');
      }
      return null;
    }

    return increase > 0 ? increase : decrease;
  }

  function updateTaxAmountSimple(form, taxAmountIncrease, taxAmountDecrease) {
    form = $(form);
    var amountFieldIncrease = form.find('[name*=\\[amount_increase\\]]');
    var taxFieldIncrease = form.find('[name*=\\[tax_amount_increase\\]]');
    var sumAmountDivIncrease = form.find('.sum_amount_increase');
    var amountFieldDecrease = form.find('[name*=\\[amount_decrease\\]]');
    var taxFieldDecrease = form.find('[name*=\\[tax_amount_decrease\\]]');
    var sumAmountDivDecrease = form.find('.sum_amount_decrease');
    var taxTypeSelect = form.find('[name*=\\[tax_type\\]]');
    var taxRatePercentField = form.find('[name*=\\[tax_rate_percent\\]]');
    var ymField = form.find('[name*=\\[ym\\]]');

    var taxType = taxTypeSelect.val();
    var amount = validateAmountOnOneSide(form, false);

    if (!amount) {
      taxFieldIncrease.val('');
      sumAmountDivIncrease.text('');
      taxFieldDecrease.val('');
      sumAmountDivDecrease.text('');

      // 非課税の場合は消費税入力欄を非活性にする
      if (taxType == tax.NONTAXABLE) {
        taxFieldIncrease.attr('disabled', true);
        taxFieldDecrease.attr('disabled', true);
      }

      return;
    }

    var taxAmount;
    var taxField;
    var sumAmountDiv;
    if ( amountFieldIncrease.val().isPresent() ) {
      taxAmount = taxAmountIncrease;
      taxField = taxFieldIncrease;
      sumAmountDiv = sumAmountDivIncrease;
      taxFieldDecrease.val('');
      sumAmountDivDecrease.text('');
    } else if ( amountFieldDecrease.val().isPresent() ) {
      taxAmount = taxAmountDecrease;
      taxField = taxFieldDecrease;
      sumAmountDiv = sumAmountDivDecrease;
      taxFieldIncrease.val('');
      sumAmountDivIncrease.text('');
    } else {
      return;
    }

    var date = ymField.val().substring(0, 4) + '-' + ymField.val().substring(4, 6) + '-01';
    var taxRate = tax.getRateOn(date);

    // 非課税の場合は消費税入力欄を非活性にする
    if ( taxType == tax.NONTAXABLE ) {
      taxRatePercentField.val('');
      taxFieldIncrease.val('');
      taxFieldIncrease.attr('disabled', true);
      taxFieldDecrease.val('');
      taxFieldDecrease.attr('disabled', true);
      sumAmountDiv.text(amount ? toAmount(amount) : '');
    }
    // 内税の場合は消費税を自動計算する
    else if ( taxType == tax.INCLUSIVE ) {
      taxRatePercentField.val(taxRate * 100);
      taxField.val(taxAmount ? taxAmount : tax.calcTaxAmount(taxType, taxRate, amount));
      taxFieldIncrease.attr('disabled', false);
      taxFieldDecrease.attr('disabled', false);
      sumAmountDiv.text(amount ? toAmount(amount) : '');
    }
    // 外税の場合は消費税を自動計算する
    else if ( taxType == tax.EXCLUSIVE ) {
      taxRatePercentField.val(taxRate * 100);
      taxField.val(taxAmount ? taxAmount : tax.calcTaxAmount(taxType, taxRate, amount));
      taxFieldIncrease.attr('disabled', false);
      taxFieldDecrease.attr('disabled', false);
      sumAmountDiv.text(amount ? toAmount(amount + taxField.val().toInt()) : '');
    }
  }

  // 自動振替の単一選択チェック
  function checkAutoJournalType( element ) {
    return checkExclusive(element.form, element.name, '自動振替は複数指定できません。');
  }

  // 自動振替時の日付必須チェック
  function checkAutoTransferDate( form, idPrefix, namePrefix, message ) {
    var elementName = namePrefix + '[auto_journal_type]';

    var autoJournalType = 0;
    for ( var i = 0; i < form.elements.length; i ++ ) {
      var elem = form.elements[i];
      if ( ! elem.name ) continue;
      if ( elem.name == elementName && elem.checked ) {
        autoJournalType = elem.value;
        break;
      }
    }

    if ( autoJournalType == AUTO_JOURNAL_TYPE_DATE_INPUT_EXPENSE ) {
      var year = toInt( document.getElementById(idPrefix + '_auto_journal_year').value );
      var month = toInt( document.getElementById(idPrefix + '_auto_journal_month').value );
      var day = toInt( document.getElementById(idPrefix + '_auto_journal_day').value );

      if ( ! checkDate(year, month, day) ) {
        alert(message);
        return false;
      }
    }

    return true;
  }

  function validateSlip(form) {
    if (validateAmountOnOneSide(form, true) == null) {
      return false;
    }

    if ( ! checkExclusive(form, 'slip[auto_journal_type]', '自動振替は複数指定できません。') ) {
      return false;
    }

    if ( ! checkAutoTransferDate( form, 'slip', 'slip', '振替日の指定が不正です。') ) {
      return false;
    }

    setMySubAccount(form);
    return true;
  }

  // 親画面上で表示している補助科目（検索条件の補助科目）をフォームにセットする
  function setMySubAccount(form) {
    if ($(form).attr('id') == 'new_simple_slip') {
      $('#simple_slip_my_sub_account_id').val($('#finder_sub_account_id').val());
    }
  }
</script>
